const RandomFunction = <T>(value: T): T => {
  return value;
};

console.log(RandomFunction<number>(2));
console.log(RandomFunction("hello world"));
console.log(RandomFunction(true));

//! Below is same code with comments generated from ChatGPT üëç
/*

// This is a TypeScript function called RandomFunction that takes a generic type T as its argument and returns a value of the same type T.
const RandomFunction = <T>(value: T): T => {
  // Returns the value passed to the function.
  return value;
};

// Calls RandomFunction with a number argument (2) and logs the returned value.
console.log(RandomFunction<number>(2));

// Calls RandomFunction with a string argument ("hello world") and logs the returned value.
console.log(RandomFunction("hello world"));

// Calls RandomFunction with a boolean argument (true) and logs the returned value.
console.log(RandomFunction(true));


*/

//? ---------------------------------------------------------------------------------------->
//?                 üòúüëå Multiple Type Variable in Generics
//? ---------------------------------------------------------------------------------------->

function add<T, U>(a: T, b: U, c: boolean): void {
  // here i am using Generics and non-generics (c:boolean) also
  console.log("----------------------------");
  
  console.log(typeof a);
  console.log(typeof b);
  console.log(typeof c);
  
}

const result1 = add<number, string>(5, "hello", true); // here i am writing <number,string> but i i dont write then also it is fine
const result2 = add("world", true, false); // here i don't write then also it is fine due to infere in TS

//! Below is same code + comment generated by ChatGPT üíØüòò

/*

// This is a TypeScript function called add that takes two generic types T and U for its first two arguments (a and b) and a boolean for its third argument (c).
function add<T, U>(a: T, b: U, c: boolean): void {
  // Logs a separator line to the console for clarity.
  console.log("----------------------------");
  
  // Logs the type of the first argument 'a' to the console.
  console.log(typeof a);
  // Logs the type of the second argument 'b' to the console.
  console.log(typeof b);
  // Logs the type of the third argument 'c' to the console.
  console.log(typeof c);
}

// Calls the add function with number and string as generic types for the first two arguments, and true as the boolean third argument.
const result1 = add<number, string>(5, "hello", true);
// Calls the add function with 'world' and true as the first two arguments, and false as the boolean third argument. TypeScript infers the types of 'a' and 'b' based on the provided arguments.
const result2 = add("world", true, false);


*/
